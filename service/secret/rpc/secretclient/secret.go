// Code generated by goctl. DO NOT EDIT!
// Source: secret.proto

package secretclient

import (
	"context"

	"github.com/tqtcloud/manage/service/secret/rpc/types/secret"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequest   = secret.CreateRequest
	CreateResponse  = secret.CreateResponse
	DeleteRequest   = secret.DeleteRequest
	DeleteResponse  = secret.DeleteResponse
	GetIdRequest    = secret.GetIdRequest
	GetListRequest  = secret.GetListRequest
	GetListResponse = secret.GetListResponse
	UpdateRequest   = secret.UpdateRequest
	UpdateResponse  = secret.UpdateResponse

	Secret interface {
		SecretCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		SecretDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		SecretUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		SecretList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
		SecretGetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	}

	defaultSecret struct {
		cli zrpc.Client
	}
)

func NewSecret(cli zrpc.Client) Secret {
	return &defaultSecret{
		cli: cli,
	}
}

func (m *defaultSecret) SecretCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := secret.NewSecretClient(m.cli.Conn())
	return client.SecretCreate(ctx, in, opts...)
}

func (m *defaultSecret) SecretDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := secret.NewSecretClient(m.cli.Conn())
	return client.SecretDelete(ctx, in, opts...)
}

func (m *defaultSecret) SecretUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := secret.NewSecretClient(m.cli.Conn())
	return client.SecretUpdate(ctx, in, opts...)
}

func (m *defaultSecret) SecretList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	client := secret.NewSecretClient(m.cli.Conn())
	return client.SecretList(ctx, in, opts...)
}

func (m *defaultSecret) SecretGetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := secret.NewSecretClient(m.cli.Conn())
	return client.SecretGetId(ctx, in, opts...)
}
