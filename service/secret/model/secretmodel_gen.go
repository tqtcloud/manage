// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	secretFieldNames          = builder.RawFieldNames(&Secret{})
	secretRows                = strings.Join(secretFieldNames, ",")
	secretRowsExpectAutoSet   = strings.Join(stringx.Remove(secretFieldNames, "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	secretRowsWithPlaceHolder = strings.Join(stringx.Remove(secretFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheSecretIdPrefix          = "cache:secret:id:"
	cacheSecretAccessKeyIdPrefix = "cache:secret:accessKeyId:"
)

type (
	secretModel interface {
		Insert(ctx context.Context, data *Secret) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Secret, error)
		FindOneByAccessKeyId(ctx context.Context, accessKeyId string) (*Secret, error)
		Update(ctx context.Context, data *Secret) error
		Delete(ctx context.Context, id string) error
	}

	defaultSecretModel struct {
		sqlc.CachedConn
		table string
	}

	Secret struct {
		Id              string    `db:"id"`              // 秘钥Id
		Vendor          string    `db:"vendor"`          // 云厂商:腾讯/阿里/华为
		AccessKeyId     string    `db:"accessKeyId"`     // 云厂商 AK accessKeyId
		AccessKeySecret string    `db:"accessKeySecret"` // 云厂商 SK accessKeySecret
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
	}
)

func newSecretModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSecretModel {
	return &defaultSecretModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`secret`",
	}
}

func (m *defaultSecretModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	secretAccessKeyIdKey := fmt.Sprintf("%s%v", cacheSecretAccessKeyIdPrefix, data.AccessKeyId)
	secretIdKey := fmt.Sprintf("%s%v", cacheSecretIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, secretAccessKeyIdKey, secretIdKey)
	return err
}

func (m *defaultSecretModel) FindOne(ctx context.Context, id string) (*Secret, error) {
	secretIdKey := fmt.Sprintf("%s%v", cacheSecretIdPrefix, id)
	var resp Secret
	err := m.QueryRowCtx(ctx, &resp, secretIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", secretRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSecretModel) FindOneByAccessKeyId(ctx context.Context, accessKeyId string) (*Secret, error) {
	secretAccessKeyIdKey := fmt.Sprintf("%s%v", cacheSecretAccessKeyIdPrefix, accessKeyId)
	var resp Secret
	err := m.QueryRowIndexCtx(ctx, &resp, secretAccessKeyIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `accessKeyId` = ? limit 1", secretRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, accessKeyId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSecretModel) Insert(ctx context.Context, data *Secret) (sql.Result, error) {
	secretAccessKeyIdKey := fmt.Sprintf("%s%v", cacheSecretAccessKeyIdPrefix, data.AccessKeyId)
	secretIdKey := fmt.Sprintf("%s%v", cacheSecretIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, secretRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Vendor, data.AccessKeyId, data.AccessKeySecret)
	}, secretAccessKeyIdKey, secretIdKey)
	return ret, err
}

func (m *defaultSecretModel) Update(ctx context.Context, newData *Secret) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	secretAccessKeyIdKey := fmt.Sprintf("%s%v", cacheSecretAccessKeyIdPrefix, data.AccessKeyId)
	secretIdKey := fmt.Sprintf("%s%v", cacheSecretIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, secretRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Vendor, newData.AccessKeyId, newData.AccessKeySecret, newData.Id)
	}, secretAccessKeyIdKey, secretIdKey)
	return err
}

func (m *defaultSecretModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSecretIdPrefix, primary)
}

func (m *defaultSecretModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", secretRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSecretModel) tableName() string {
	return m.table
}
