// Code generated by goctl. DO NOT EDIT!
// Source: task.proto

package taskclient

import (
	"context"

	"github.com/tqtcloud/manage/service/task/rpc/types/task"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequest   = task.CreateRequest
	CreateResponse  = task.CreateResponse
	DeleteRequest   = task.DeleteRequest
	DeleteResponse  = task.DeleteResponse
	GetIdRequest    = task.GetIdRequest
	GetListRequest  = task.GetListRequest
	GetListResponse = task.GetListResponse

	Task interface {
		TaskCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		TaskDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		TaskList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
		TaskGetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	}

	defaultTask struct {
		cli zrpc.Client
	}
)

func NewTask(cli zrpc.Client) Task {
	return &defaultTask{
		cli: cli,
	}
}

func (m *defaultTask) TaskCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskCreate(ctx, in, opts...)
}

func (m *defaultTask) TaskDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskDelete(ctx, in, opts...)
}

func (m *defaultTask) TaskList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskList(ctx, in, opts...)
}

func (m *defaultTask) TaskGetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskGetId(ctx, in, opts...)
}
