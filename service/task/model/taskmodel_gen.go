// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheTaskIdPrefix       = "cache:task:id:"
	cacheTaskTasknamePrefix = "cache:task:taskname:"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Task, error)
		FindOneByTaskname(ctx context.Context, taskname string) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, id string) error
	}

	defaultTaskModel struct {
		sqlc.CachedConn
		table string
	}

	Task struct {
		Id           string    `db:"id"`            // 任务Id
		Taskname     string    `db:"taskname"`      // 同步任务名称
		Vendor       string    `db:"vendor"`        // 云厂商:腾讯/阿里/华为
		Tasktype     string    `db:"tasktype"`      // 任务同步类型，主机/rds/slb
		SecretId     string    `db:"secret_id"`     // 用于操作资源的ak,sk Id
		SecretDesc   string    `db:"secret_desc"`   // 凭证描述
		Region       string    `db:"region"`        // 操作区域Region
		Taskuser     string    `db:"taskuser"`      // 发起同步的用户
		Status       string    `db:"status"`        // 任务当前状态
		Message      string    `db:"message"`       // 任务失败相关信息
		StartAt      int64     `db:"start_at"`      // 任务开始时间
		EndAt        int64     `db:"end_at"`        // 任务结束时间
		TotalSucceed int64     `db:"total_succeed"` // 总共操作成功的资源数量
		TotalFailed  int64     `db:"total_failed"`  // 总共操作失败的资源数量
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newTaskModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTaskModel {
	return &defaultTaskModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	taskIdKey := fmt.Sprintf("%s%v", cacheTaskIdPrefix, id)
	taskTasknameKey := fmt.Sprintf("%s%v", cacheTaskTasknamePrefix, data.Taskname)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, taskIdKey, taskTasknameKey)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, id string) (*Task, error) {
	taskIdKey := fmt.Sprintf("%s%v", cacheTaskIdPrefix, id)
	var resp Task
	err := m.QueryRowCtx(ctx, &resp, taskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) FindOneByTaskname(ctx context.Context, taskname string) (*Task, error) {
	taskTasknameKey := fmt.Sprintf("%s%v", cacheTaskTasknamePrefix, taskname)
	var resp Task
	err := m.QueryRowIndexCtx(ctx, &resp, taskTasknameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `taskname` = ? limit 1", taskRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, taskname); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	taskIdKey := fmt.Sprintf("%s%v", cacheTaskIdPrefix, data.Id)
	taskTasknameKey := fmt.Sprintf("%s%v", cacheTaskTasknamePrefix, data.Taskname)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Taskname, data.Vendor, data.Tasktype, data.SecretId, data.SecretDesc, data.Region, data.Taskuser, data.Status, data.Message, data.StartAt, data.EndAt, data.TotalSucceed, data.TotalFailed)
	}, taskIdKey, taskTasknameKey)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, newData *Task) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	taskIdKey := fmt.Sprintf("%s%v", cacheTaskIdPrefix, data.Id)
	taskTasknameKey := fmt.Sprintf("%s%v", cacheTaskTasknamePrefix, data.Taskname)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Taskname, newData.Vendor, newData.Tasktype, newData.SecretId, newData.SecretDesc, newData.Region, newData.Taskuser, newData.Status, newData.Message, newData.StartAt, newData.EndAt, newData.TotalSucceed, newData.TotalFailed, newData.Id)
	}, taskIdKey, taskTasknameKey)
	return err
}

func (m *defaultTaskModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTaskIdPrefix, primary)
}

func (m *defaultTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
