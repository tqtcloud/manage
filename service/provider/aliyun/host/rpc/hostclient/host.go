// Code generated by goctl. DO NOT EDIT!
// Source: host.proto

package hostclient

import (
	"context"

	"github.com/tqtcloud/manage/service/provider/aliyun/host/rpc/types/host"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequest   = host.CreateRequest
	CreateResponse  = host.CreateResponse
	DeleteRequest   = host.DeleteRequest
	DeleteResponse  = host.DeleteResponse
	GetIdRequest    = host.GetIdRequest
	GetListRequest  = host.GetListRequest
	GetListResponse = host.GetListResponse

	Host interface {
		HostSync(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*GetListResponse, error)
		HostDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		HostUpdate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		HostList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
		HostGetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	}

	defaultHost struct {
		cli zrpc.Client
	}
)

func NewHost(cli zrpc.Client) Host {
	return &defaultHost{
		cli: cli,
	}
}

func (m *defaultHost) HostSync(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	client := host.NewHostClient(m.cli.Conn())
	return client.HostSync(ctx, in, opts...)
}

func (m *defaultHost) HostDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := host.NewHostClient(m.cli.Conn())
	return client.HostDelete(ctx, in, opts...)
}

func (m *defaultHost) HostUpdate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := host.NewHostClient(m.cli.Conn())
	return client.HostUpdate(ctx, in, opts...)
}

func (m *defaultHost) HostList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	client := host.NewHostClient(m.cli.Conn())
	return client.HostList(ctx, in, opts...)
}

func (m *defaultHost) HostGetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := host.NewHostClient(m.cli.Conn())
	return client.HostGetId(ctx, in, opts...)
}
