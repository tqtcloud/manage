// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hostsFieldNames          = builder.RawFieldNames(&Hosts{})
	hostsRows                = strings.Join(hostsFieldNames, ",")
	hostsRowsExpectAutoSet   = strings.Join(stringx.Remove(hostsFieldNames, "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	hostsRowsWithPlaceHolder = strings.Join(stringx.Remove(hostsFieldNames, "`instance_id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheHostsInstanceIdPrefix = "cache:hosts:instanceId:"
)

type (
	hostsModel interface {
		Insert(ctx context.Context, data *Hosts) (sql.Result, error)
		FindOne(ctx context.Context, instanceId string) (*Hosts, error)
		Update(ctx context.Context, data *Hosts) error
		Delete(ctx context.Context, instanceId string) error
	}

	defaultHostsModel struct {
		sqlc.CachedConn
		table string
	}

	Hosts struct {
		InstanceId              string         `db:"instance_id"`                // 实例Id
		Regionid                string         `db:"regionid"`                   // 实例所属地域ID
		InstanceName            string         `db:"instance_name"`              // 实例名称
		ExpiredTime             string         `db:"expired_time"`               // 过期时间
		CreationTime            string         `db:"creation_time"`              // 实例创建时间
		KeyPairName             sql.NullString `db:"keyPair_name"`               // 密钥对名称
		Description             sql.NullString `db:"description"`                // 实例描述
		OsName                  string         `db:"os_name"`                    // 操作系统名称
		ImageId                 string         `db:"image_id"`                   // 镜像Id
		GpuAmount               sql.NullInt64  `db:"gpu_amount"`                 // gpu核数
		Cpu                     int64          `db:"cpu"`                        // cpu核数
		Memory                  int64          `db:"memory"`                     // 内存大小
		OsType                  string         `db:"os_type"`                    // 操作系统类型
		InstanceType            string         `db:"instance_type"`              // 实例规格
		InstanceChargeType      string         `db:"instance_charge_type"`       // 实例的计费方式
		InternetMaxBandwidthOut int64          `db:"internet_max_bandwidth_out"` // 外网最大出口带宽
		InternetMaxBandwidthIn  int64          `db:"internet_max_bandwidth_in"`  // 外网最大入口带宽
		Primaryip               string         `db:"primaryip"`                  // 弹性网卡主私有IP地址
		Publicip                sql.NullString `db:"publicip"`                   // 实例的公网IP列表
		EipDddresses            sql.NullString `db:"eip_dddresses"`              // 实例的弹性公网IP列表
		SecurityGroupId         sql.NullString `db:"security_group_id"`          // 实例所属安全组Id列表
	}
)

func newHostsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultHostsModel {
	return &defaultHostsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`hosts`",
	}
}

func (m *defaultHostsModel) Delete(ctx context.Context, instanceId string) error {
	hostsInstanceIdKey := fmt.Sprintf("%s%v", cacheHostsInstanceIdPrefix, instanceId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `instance_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, instanceId)
	}, hostsInstanceIdKey)
	return err
}

func (m *defaultHostsModel) FindOne(ctx context.Context, instanceId string) (*Hosts, error) {
	hostsInstanceIdKey := fmt.Sprintf("%s%v", cacheHostsInstanceIdPrefix, instanceId)
	var resp Hosts
	err := m.QueryRowCtx(ctx, &resp, hostsInstanceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `instance_id` = ? limit 1", hostsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, instanceId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostsModel) Insert(ctx context.Context, data *Hosts) (sql.Result, error) {
	hostsInstanceIdKey := fmt.Sprintf("%s%v", cacheHostsInstanceIdPrefix, data.InstanceId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hostsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.InstanceId, data.Regionid, data.InstanceName, data.ExpiredTime, data.CreationTime, data.KeyPairName, data.Description, data.OsName, data.ImageId, data.GpuAmount, data.Cpu, data.Memory, data.OsType, data.InstanceType, data.InstanceChargeType, data.InternetMaxBandwidthOut, data.InternetMaxBandwidthIn, data.Primaryip, data.Publicip, data.EipDddresses, data.SecurityGroupId)
	}, hostsInstanceIdKey)
	return ret, err
}

func (m *defaultHostsModel) Update(ctx context.Context, data *Hosts) error {
	hostsInstanceIdKey := fmt.Sprintf("%s%v", cacheHostsInstanceIdPrefix, data.InstanceId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `instance_id` = ?", m.table, hostsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Regionid, data.InstanceName, data.ExpiredTime, data.CreationTime, data.KeyPairName, data.Description, data.OsName, data.ImageId, data.GpuAmount, data.Cpu, data.Memory, data.OsType, data.InstanceType, data.InstanceChargeType, data.InternetMaxBandwidthOut, data.InternetMaxBandwidthIn, data.Primaryip, data.Publicip, data.EipDddresses, data.SecurityGroupId, data.InstanceId)
	}, hostsInstanceIdKey)
	return err
}

func (m *defaultHostsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheHostsInstanceIdPrefix, primary)
}

func (m *defaultHostsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `instance_id` = ? limit 1", hostsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHostsModel) tableName() string {
	return m.table
}
